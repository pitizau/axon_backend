# In file: agents/optimization_agent.py

import json
from typing import Dict, Any
from agents.base_agent import BaseAgent
from prompts.optimization_prompt import OPTIMIZATION_PROMPT
from tools.sql_writer import SqlWriter

class QueryOptimizationAgent(BaseAgent):
    """
    An agent that suggests optimizations for a generated SQL schema.
    """
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.sql_writer = SqlWriter()
        self.logger.info("QueryOptimizationAgent initialized.")

    def run(self, generated_sql: str, schema_analysis: Dict[str, Any], output_path: str, context: str = "") -> None:
        """
        Generates and saves a SQL script with optimization suggestions.

        Args:
            generated_sql: The SQL DDL generated by the transformation agent.
            schema_analysis: The structured analysis from the SourceAnalysisAgent.
            output_path: The file path for the optimization SQL script.
            context: Optional context from previous runs.
        """
        self.logger.info("Starting query optimization analysis...")
        try:
            analysis_json_str = json.dumps(schema_analysis, indent=2)

            prompt = OPTIMIZATION_PROMPT.format(
                generated_sql=generated_sql,
                schema_analysis_json=analysis_json_str,
                context=context
            )

            optimization_sql = self._execute_prompt(prompt)

            self.sql_writer.save_sql(
                sql_content=optimization_sql,
                output_path=output_path
            )
            self.logger.info(f"Optimization SQL successfully generated and saved to {output_path}")

        except Exception as e:
            self.logger.error(f"An error occurred during query optimization: {e}", exc_info=True)
            error_content = f"-- Optimization SQL Generation Failed\n-- An error occurred: {e}"
            self.sql_writer.save_sql(sql_content=error_content, output_path=output_path)
